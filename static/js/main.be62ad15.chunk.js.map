{"version":3,"sources":["components/Weather.js","components/Location.js","helpers/api.js","components/LastQueryCities.js","components/ForecastWeather.js","components/CurrentDayWeather.js","App.js","store.js","index.js"],"names":["connect","state","currentDayWeather","_ref","current","react_default","a","createElement","className","concat","location","apiKey","apiUrlCurrent","apiUrlForecast","propsCity","city","historyCities","dispatch","setCity","type","length","map","index","key","onClick","forecastWeather","match","react_router_dom","to","forecastDay","date","day","maxtemp_c","currentCityWeather","setForecastWeather","setForecast","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","query","fetch","then","response","json","sent","stop","apply","this","arguments","components_Location","components_Weather","components_LastQueryCities","react_router","path","component","ForecastWeather","App","confirmSearchCity","event","_this","props","which","target","value","prevProps","setCurrentDayWeather","addCityToHistory","weather","Input","placeholder","onChange","onKeyPress","CurrentDayWeather","Component","cityName","store","createStore","action","objectSpread","copyHistoryCities","toConsumableArray","includes","push","shift","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.be62ad15.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentDayWeather})=> {\r\n  const current = currentDayWeather['current'];\r\n\r\n  return (\r\n       <ul>\r\n          <li className={\"temp_c\"}>Temperature: {`${current['temp_c']} â„ƒ`}</li>\r\n          <li className={\"temp_c\"}>Precip: {`${current['precip_mm']} mm`}</li>\r\n          <li className={\"temp_c\"}>Wind: {`${current['wind_mph']} mph`}</li>\r\n          <li className={\"temp_c\"}>Pressure: {`${current['pressure_in']} in`}</li>\r\n          <li className={\"temp_c\"}>Humidity: {`${current['humidity']}`}</li>\r\n\r\n      </ul>\r\n  )\r\n};\r\n\r\nconst mapProps = (state)=>({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapProps)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Location = ({currentDayWeather})=> {\r\n    const location = currentDayWeather['location'];\r\n\r\n    return (\r\n            <ul>\r\n                <li>Country: {location['country']}</li>\r\n                <li>City: {location['name']}</li>\r\n                <li>Localtime: {location['localtime']}</li>\r\n            </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(Location);","const apiKey = 'key=40d72c138d8f408382d145239191207';\r\nconst apiUrlCurrent = 'https://api.apixu.com/v1/current.json?';\r\nconst apiUrlForecast = 'https://api.apixu.com/v1/forecast.json?';\r\n\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`${apiUrlCurrent+apiKey}&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`${apiUrlForecast+apiKey}&q=${query}&days=5`)\r\n        .then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getCurrentDayData} from '../helpers/api'\r\n\r\nconst LastQueryCities = ({historyCities, currentDayWeather, setCity, propsCity})=> {\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n         <h4>last 5 query cities...</h4>\r\n             <ul>\r\n                {historyCities.length>0?\r\n                     historyCities.map((city, index)=>\r\n                     <li\r\n                        key={index}\r\n                        onClick={()=>setCity(city)}\r\n                        className={currentDayWeather.location['name']===city? 'active': ''}\r\n                      >\r\n                       {city}\r\n                     </li>)\r\n                :null}\r\n              </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    propsCity: state.city,\r\n    historyCities: state.historyCities,\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\nconst mapDispatchProps = (dispatch)=>{\r\n    return {\r\n        setCity:(city)=> dispatch({type: 'SET_CITY', city: city})\r\n}};\r\n\r\nexport default connect(mapState, mapDispatchProps)(LastQueryCities);","import React from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst ForecastWeather = ({ forecastWeather, match })=> {\r\n    return (\r\n            <div className={\"forecast\"}>\r\n                <Link to={'/'}>Back</Link>\r\n\r\n                {\r\n                 forecastWeather.map(forecastDay=>{\r\n                    return <li>\r\n                         {forecastDay.date + '--- avgtemp_c:' +forecastDay.day.maxtemp_c}\r\n                       </li>\r\n                    })\r\n\r\n                }\r\n             </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState)(ForecastWeather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport LastQueryCities  from './LastQueryCities';\r\nimport {getForecastData} from \"../helpers/api\";\r\nimport ForecastWeather from \"./ForecastWeather\";\r\n\r\nconst CurrentDayWeather = ( {currentCityWeather, setForecastWeather, forecastWeather, } )=> {\r\n\r\n    const setForecast = async ()=>{\r\n        const forecastWeather = await getForecastData(currentCityWeather.location['name']);\r\n        setForecastWeather((forecastWeather['forecast']['forecastday']));\r\n    };\r\n\r\n    return (\r\n        currentCityWeather.current ?\r\n            <Router>\r\n                <div className={'rendered__weather-detail'}>\r\n                    <Location/>\r\n                    <Weather/>\r\n                </div>\r\n\r\n                <LastQueryCities/>\r\n\r\n                <Link\r\n                    className={\"link__forecast\"}\r\n                    to={\"/week\"}\r\n                    onClick={setForecast}\r\n                >\r\n                    Weather on week\r\n                </Link>\r\n                <Route path={\"/week\"} component={ForecastWeather} />\r\n            </Router>\r\n            : null\r\n    )\r\n};\r\n\r\n\r\nconst mapDispatch = (dispatch) => {\r\n    return{\r\n    setForecastWeather: (forecastWeather) => dispatch({type:'SET_FORECAST_WEATHER',forecastWeather: forecastWeather})\r\n}\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentCityWeather: state.currentDayWeather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);\r\n","import React, {Component} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport { connect} from 'react-redux';\nimport {Input} from 'reactstrap'\nimport CurrentDayWeather from './components/CurrentDayWeather';\nimport ForecastWeather from \"./components/ForecastWeather\";\nimport { getCurrentDayData} from './helpers/api';\nimport './App.scss';\n\nclass App extends Component {\n\n  confirmSearchCity = (event)=>{\n    const {setCity} = this.props;\n\n    if(event.which === 13 ){\n      const city = event.target.value;\n      setCity(city)\n    }\n  };\n\n  async componentDidUpdate( prevProps ) {\n      const {city,\n          currentDayWeather,\n          setCurrentDayWeather,\n          addCityToHistory} = this.props;\n\n      if (prevProps.city !== city) {\n          const weather = await getCurrentDayData(city);\n          setCurrentDayWeather(weather)\n      }\n\n      if (prevProps.currentDayWeather.location !== currentDayWeather.location && currentDayWeather.location ){\n          addCityToHistory(this.props.currentDayWeather.location['name']);\n      }\n  }\n\n  render(){\n\n      return (\n          <div className=\"App\">\n\n             <header className=\"App-header\">\n                  <h1>Forecast App</h1>\n                  <Input\n                      type=\"text\"\n                      placeholder={\"type city, on english please...\"}\n                      onChange={ this.confirmSearchCity }\n                      onKeyPress={ this.confirmSearchCity }\n                  />\n             </header>\n\n              <main>\n                  <Switch>\n                      <Route path={\"/\"} component={CurrentDayWeather}/>\n                      <Route path={\"/week\"} component={ForecastWeather}/>\n                  </Switch>\n              </main>\n\n          </div>\n      );\n  }\n}\n\nconst mapProps = (state) => ({\n    city: state.city,\n    currentDayWeather: state.currentDayWeather,\n    forecastWeather: state.forecastWeather,\n\n});\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        setCity: (city)=> dispatch(\n            {type: 'SET_CITY', city: city}\n            ),\n        setCurrentDayWeather: (currentDayWeather)=> dispatch(\n            {type: 'SET_CURRENT_DAY_WEATHER', currentDayWeather: currentDayWeather }\n            ),\n        addCityToHistory: (cityName)=> dispatch(\n            {type: 'ADD_CITY_TO_HISTORY', cityName: cityName}\n            ),\n}};\n\nexport default connect(mapProps, mapDispatchProps)(App);","import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n        city: '',\r\n        currentDayWeather: {},\r\n        forecastWeather:[],\r\n        historyCities: []\r\n};\r\n\r\n//Actions\r\nfunction  reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            };\r\n        case 'SET_CURRENT_DAY_WEATHER':\r\n            return {\r\n                ...state,\r\n                currentDayWeather: action.currentDayWeather\r\n        };\r\n        case 'SET_FORECAST_WEATHER':\r\n            return {\r\n                ...state,\r\n                forecastWeather: action.forecastWeather\r\n            };\r\n        case 'ADD_CITY_TO_HISTORY':\r\n            const copyHistoryCities = [...state.historyCities];\r\n\r\n            if(!copyHistoryCities.includes(action.cityName)){\r\n                copyHistoryCities.push(action.cityName);\r\n            }\r\n\r\n            if(copyHistoryCities.length>5){\r\n                copyHistoryCities.shift();\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                historyCities: copyHistoryCities\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nstore.subscribe(()=>{\r\n    console.log(store.getState())\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n    ,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}