{"version":3,"sources":["components/Weather.js","components/Location.js","helpers/api.js","components/LastQueryCities.js","components/ForecastWeather.js","components/CurrentDayWeather.js","App.js","store.js","index.js"],"names":["connect","state","currentDayWeather","_ref","current","react_default","a","createElement","className","concat","location","apiKey","apiUrlCurrent","apiUrlForecast","propsCity","city","historyCities","dispatch","setCity","type","length","map","index","key","onClick","forecastWeather","match","react_router_dom","exact","to","forecastDay","date","day","maxtemp_c","currentCityWeather","setForecastWeather","components_Location","components_Weather","components_LastQueryCities","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","confirmSearchCity","event","props","which","target","value","setState","prevState","objectSpread","componentCurrentDay","setForecast","asyncToGenerator","regenerator_default","mark","_callee","_this$props","wrap","_context","prev","next","query","fetch","then","response","json","sent","stop","prevProps","setCurrentDayWeather","addCityToHistory","weather","Input","placeholder","onChange","onKeyPress","react_router","path","component","CurrentDayWeather","ForecastWeather","Component","cityName","store","createStore","action","copyHistoryCities","toConsumableArray","includes","push","shift","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"wUAsBeA,cAJE,SAACC,GAAD,MAAU,CACvBC,kBAAmBD,EAAMC,oBAGdF,CAnBC,SAAAG,GAAwB,IAChCC,EADgCD,EAAtBD,kBACiB,QAEjC,OACKG,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,mBAAAC,OAA0CL,EAAO,OAAjD,YACAC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,cAAAC,OAAqCL,EAAO,UAA5C,QACAC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,YAAAC,OAAmCL,EAAO,SAA1C,SACAC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,gBAAAC,OAAuCL,EAAO,YAA9C,QACAC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,gBAAAC,OAAuCL,EAAO,cCOzCJ,cAJE,SAACC,GAAD,MAAU,CACvBC,kBAAmBD,EAAMC,oBAGdF,CAhBE,SAAAG,GAAwB,IAC/BO,EAD+BP,EAAtBD,kBACmB,SAElC,OACQG,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBAAcG,EAAQ,SACtBL,EAAAC,EAAAC,cAAA,mBAAWG,EAAQ,MACnBL,EAAAC,EAAAC,cAAA,wBAAgBG,EAAQ,cCVlCC,EAAS,sCACTC,EAAgB,yCAChBC,EAAiB,0CCEvB,IA+Beb,cAVE,SAACC,GAAD,MAAU,CACvBa,UAAWb,EAAMc,KACjBC,cAAef,EAAMe,cACrBd,kBAAmBD,EAAMC,oBAEJ,SAACe,GACtB,MAAO,CACHC,QAAQ,SAACH,GAAD,OAASE,EAAS,CAACE,KAAM,WAAYJ,KAAMA,OAG5Cf,CA/BS,SAAAG,GAA2D,IAAzDa,EAAyDb,EAAzDa,cAAed,EAA0CC,EAA1CD,kBAAmBgB,EAAuBf,EAAvBe,QAAuBf,EAAdW,UAEjE,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACfH,EAAAC,EAAAC,cAAA,oCACIF,EAAAC,EAAAC,cAAA,UACIS,EAAcI,OAAO,EACjBJ,EAAcK,IAAI,SAACN,EAAMO,GAAP,OAClBjB,EAAAC,EAAAC,cAAA,MACGgB,IAAKD,EACLE,QAAS,kBAAIN,EAAQH,IACrBP,UAAWN,EAAkBQ,SAAlB,OAAqCK,EAAM,SAAU,IAEhEA,KAEP,SCOFf,cAJE,SAACC,GAAD,MAAU,CACvBwB,gBAAiBxB,EAAMwB,kBAGZzB,CArBS,SAAAG,GAA+B,IAA5BsB,EAA4BtB,EAA5BsB,gBAA4BtB,EAAXuB,MACxC,OACQrB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YACZH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,OAAK,EAACC,GAAI,KAAhB,QAGCJ,EAAgBJ,IAAI,SAAAS,GACjB,OAAOzB,EAAAC,EAAAC,cAAA,UACDuB,EAAYC,KAAO,iBAAkBD,EAAYE,IAAIC,gBCwBhEjC,cALE,SAACC,GAAD,MAAU,CACvBiC,mBAAoBjC,EAAMC,kBAC1BuB,gBAAiBxB,EAAMwB,kBARP,SAACR,GACjB,MAAM,IAUKjB,CA5BW,SAAAG,GAAkE,IAA/D+B,EAA+D/B,EAA/D+B,mBAA+D/B,EAA3CgC,mBAA2ChC,EAAvBsB,gBAGjE,OACIS,EAAmB9B,QACfC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,4BACZH,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,OAEJhC,EAAAC,EAAAC,cAAC+B,EAAD,OAEF,OCZRC,qBAEJ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMJI,kBAAoB,SAACC,GAAQ,IACpB9B,EAAWsB,EAAKS,MAAhB/B,QAEY,KAAhB8B,EAAME,QAEPhC,EADa8B,EAAMG,OAAOC,OAG1BZ,EAAKa,SAAS,SAAAC,GAAS,OAAAb,OAAAc,EAAA,EAAAd,CAAA,GACda,EADc,CAEjBE,qBAAsBF,EAAUE,0BAhB7BhB,EAuBZiB,YAvBYhB,OAAAiB,EAAA,EAAAjB,CAAAkB,EAAArD,EAAAsD,KAuBE,SAAAC,IAAA,IAAAC,EAAA/C,EAAAoB,EAAAV,EAAA,OAAAkC,EAAArD,EAAAyD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAJ,EAEyBtB,EAAKS,MAAjClC,EAFG+C,EAEH/C,KAAMoB,EAFH2B,EAEG3B,mBAFH6B,EAAAE,KAAA,EJxBQC,EI2B4BpD,EJ1B1CqD,MAAK,GAAA3D,OAAII,EAAeF,EAAnB,OAAAF,OAA+B0D,EAA/B,YACPE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SIsBlB,OAGJ9C,EAHIuC,EAAAQ,KAIVrC,EAAoBV,EAAe,SAAf,aAJV,wBAAAuC,EAAAS,OJxBjB,IAAyBN,GIwBRN,MArBXrB,EAAKvC,MAAM,CACRuD,qBAAqB,GAHfhB,0HA8BakC,wFAIE/B,KAAKM,MAHtBlC,SACHb,sBACAyE,yBACAC,qBAEAF,EAAU3D,OAASA,kCJ1CFoD,EI2CuBpD,EJ1C1CqD,MAAK,GAAA3D,OAAIG,EAAcD,EAAlB,OAAAF,OAA8B0D,IAClCE,KAAK,SAAAC,GAAQ,OAAEA,EAASC,gBIyCjBM,SACNF,EAAqBE,UAIrBH,EAAUxE,kBAAkBQ,WAAaR,EAAkBQ,UAAYR,EAAkBQ,UACzFkE,EAAiBjC,KAAKM,MAAM/C,kBAAkBQ,SAA7B,uCJjD3B,IAA2ByD,oGIuDrB,OACI9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEZH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CACI3D,KAAK,OACL4D,YAAa,kCACbC,SAAWrC,KAAKI,kBAChBkC,WAAatC,KAAKI,qBAK1B1C,EAAAC,EAAAC,cAAA,YAEQF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAM,IAAKC,UAAWC,IAC7BhF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAM,QAASC,UAAWE,KAIxC3C,KAAK1C,MAAMuD,oBACRnD,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACInB,UAAW,iBACXqB,GAAI,QACJL,QAASmB,KAAKc,aAHlB,mBAMS,aA/ET8B,cA8GHvF,cAvBE,SAACC,GAAD,MAAY,CACzBc,KAAMd,EAAMc,KACZb,kBAAmBD,EAAMC,kBACzBuB,gBAAiBxB,EAAMwB,kBAIF,SAACR,GACtB,MAAO,CACHC,QAAS,SAACH,GAAD,OAASE,EACd,CAACE,KAAM,WAAYJ,KAAMA,KAE7B4D,qBAAsB,SAACzE,GAAD,OAAsBe,EACxC,CAACE,KAAM,0BAA2BjB,kBAAmBA,KAEzD0E,iBAAkB,SAACY,GAAD,OAAavE,EAC3B,CAACE,KAAM,sBAAuBqE,SAAUA,KAE5CrD,mBAAoB,SAACV,GAAD,OAAqBR,EACrC,CAACE,KAAK,uBAAuBM,gBAAiBA,OAI3CzB,CAAoCuC,mBCxEnD,IAAMkD,EAAQC,YArCd,SAAkBzF,EAAO0F,GACrB,OAAQA,EAAOxE,MACX,IAAK,WACD,OAAOsB,OAAAc,EAAA,EAAAd,CAAA,GACAxC,EADP,CAEIc,KAAM4E,EAAO5E,OAErB,IAAK,0BACD,OAAO0B,OAAAc,EAAA,EAAAd,CAAA,GACAxC,EADP,CAEIC,kBAAmByF,EAAOzF,oBAElC,IAAK,uBACD,OAAOuC,OAAAc,EAAA,EAAAd,CAAA,GACAxC,EADP,CAEIwB,gBAAiBkE,EAAOlE,kBAEhC,IAAK,sBACD,IAAMmE,EAAiBnD,OAAAoD,EAAA,EAAApD,CAAOxC,EAAMe,eAUpC,OARI4E,EAAkBE,SAASH,EAAOH,WAClCI,EAAkBG,KAAKJ,EAAOH,UAG/BI,EAAkBxE,OAAO,GACxBwE,EAAkBI,QAGfvD,OAAAc,EAAA,EAAAd,CAAA,GACAxC,EADP,CAEIe,cAAe4E,IAEvB,QACI,OAAO3F,IAzCE,CACbc,KAAM,GACNb,kBAAmB,GACnBuB,gBAAgB,GAChBT,cAAe,KA2CvByE,EAAMQ,UAAU,WACZC,QAAQC,IAAIV,EAAMW,cAGPX,QC3CfY,IAASC,OACLjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAUd,MAAOA,GACbpF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACItB,EAAAC,EAAAC,cAACiG,EAAD,QAIZC,SAASC,eAAe","file":"static/js/main.eaabba57.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentDayWeather})=> {\r\n  const current = currentDayWeather['current'];\r\n\r\n  return (\r\n       <ul>\r\n          <li className={\"temp_c\"}>Temperature: {`${current['temp_c']} â„ƒ`}</li>\r\n          <li className={\"temp_c\"}>Precip: {`${current['precip_mm']} mm`}</li>\r\n          <li className={\"temp_c\"}>Wind: {`${current['wind_mph']} mph`}</li>\r\n          <li className={\"temp_c\"}>Pressure: {`${current['pressure_in']} in`}</li>\r\n          <li className={\"temp_c\"}>Humidity: {`${current['humidity']}`}</li>\r\n\r\n      </ul>\r\n  )\r\n};\r\n\r\nconst mapProps = (state)=>({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapProps)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Location = ({currentDayWeather})=> {\r\n    const location = currentDayWeather['location'];\r\n\r\n    return (\r\n            <ul>\r\n                <li>Country: {location['country']}</li>\r\n                <li>City: {location['name']}</li>\r\n                <li>Localtime: {location['localtime']}</li>\r\n            </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(Location);","const apiKey = 'key=40d72c138d8f408382d145239191207';\r\nconst apiUrlCurrent = 'https://api.apixu.com/v1/current.json?';\r\nconst apiUrlForecast = 'https://api.apixu.com/v1/forecast.json?';\r\n\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`${apiUrlCurrent+apiKey}&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`${apiUrlForecast+apiKey}&q=${query}&days=5`)\r\n        .then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getCurrentDayData} from '../helpers/api'\r\n\r\nconst LastQueryCities = ({historyCities, currentDayWeather, setCity, propsCity})=> {\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n         <h4>last 5 query cities...</h4>\r\n             <ul>\r\n                {historyCities.length>0?\r\n                     historyCities.map((city, index)=>\r\n                     <li\r\n                        key={index}\r\n                        onClick={()=>setCity(city)}\r\n                        className={currentDayWeather.location['name']===city? 'active': ''}\r\n                      >\r\n                       {city}\r\n                     </li>)\r\n                :null}\r\n              </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    propsCity: state.city,\r\n    historyCities: state.historyCities,\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\nconst mapDispatchProps = (dispatch)=>{\r\n    return {\r\n        setCity:(city)=> dispatch({type: 'SET_CITY', city: city})\r\n}};\r\n\r\nexport default connect(mapState, mapDispatchProps)(LastQueryCities);","import React from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst ForecastWeather = ({ forecastWeather, match })=> {\r\n    return (\r\n            <div className={\"forecast\"}>\r\n                <Link exact to={'/'}>Back</Link>\r\n\r\n                {\r\n                 forecastWeather.map(forecastDay=>{\r\n                    return <li>\r\n                         {forecastDay.date + '--- avgtemp_c:' +forecastDay.day.maxtemp_c}\r\n                       </li>\r\n                    })\r\n\r\n                }\r\n             </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState)(ForecastWeather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport LastQueryCities  from './LastQueryCities';\r\nimport {getForecastData} from \"../helpers/api\";\r\nimport ForecastWeather from \"./ForecastWeather\";\r\n\r\nconst CurrentDayWeather = ( {currentCityWeather, setForecastWeather, forecastWeather, } )=> {\r\n\r\n\r\n    return (\r\n        currentCityWeather.current ?\r\n            <Router>\r\n                <div className={'rendered__weather-detail'}>\r\n                    <Location/>\r\n                    <Weather/>\r\n                </div>\r\n                <LastQueryCities/>\r\n            </Router>\r\n            : null\r\n    )\r\n};\r\n\r\n\r\nconst mapDispatch = (dispatch) => {\r\n    return{\r\n\r\n}\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentCityWeather: state.currentDayWeather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);\r\n","import React, {Component} from 'react';\nimport {Route, Switch, Link} from \"react-router-dom\";\nimport { connect} from 'react-redux';\nimport {Input} from 'reactstrap'\nimport CurrentDayWeather from './components/CurrentDayWeather';\nimport ForecastWeather from \"./components/ForecastWeather\";\nimport {getCurrentDayData, getForecastData} from './helpers/api';\nimport './App.scss';\n\nclass App extends Component {\n\n  constructor(){\n      super();\n      this.state={\n         componentCurrentDay: false\n      }\n  }\n\n  confirmSearchCity = (event)=>{\n    const {setCity} = this.props;\n\n    if(event.which === 13 ){\n      const city = event.target.value;\n      setCity(city);\n\n      this.setState(prevState=>({\n            ...prevState,\n            componentCurrentDay: !prevState.componentCurrentDay\n      }))\n    }\n\n\n  };\n\n   setForecast = async ()=>{\n\n       const {city, setForecastWeather} = this.props;\n       const forecastWeather = await getForecastData(city);\n       setForecastWeather((forecastWeather['forecast']['forecastday']));\n  };\n\n  async componentDidUpdate( prevProps ) {\n      const {city,\n          currentDayWeather,\n          setCurrentDayWeather,\n          addCityToHistory} = this.props;\n\n      if (prevProps.city !== city) {\n          const weather = await getCurrentDayData(city);\n          setCurrentDayWeather(weather)\n\n      }\n\n      if (prevProps.currentDayWeather.location !== currentDayWeather.location && currentDayWeather.location ){\n          addCityToHistory(this.props.currentDayWeather.location['name']);\n      }\n  }\n\n  render(){\n\n      return (\n          <div className=\"App\">\n\n             <header className=\"App-header\">\n                  <h1>Forecast App</h1>\n                  <Input\n                      type=\"text\"\n                      placeholder={\"type city, on english please...\"}\n                      onChange={ this.confirmSearchCity }\n                      onKeyPress={ this.confirmSearchCity }\n                  />\n             </header>\n\n\n              <main>\n\n                      <Route path={\"/\"} component={CurrentDayWeather}/>\n                      <Route path={\"/week\"} component={ForecastWeather}/>\n\n              </main>\n\n              {this.state.componentCurrentDay?\n                  <Link\n                      className={\"link__forecast\"}\n                      to={\"/week\"}\n                      onClick={this.setForecast}\n                  >\n                      Weather on week\n                  </Link>: null\n              }\n\n          </div>\n      );\n  }\n}\n\nconst mapProps = (state) => ({\n    city: state.city,\n    currentDayWeather: state.currentDayWeather,\n    forecastWeather: state.forecastWeather,\n\n});\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        setCity: (city)=> dispatch(\n            {type: 'SET_CITY', city: city}\n            ),\n        setCurrentDayWeather: (currentDayWeather)=> dispatch(\n            {type: 'SET_CURRENT_DAY_WEATHER', currentDayWeather: currentDayWeather }\n            ),\n        addCityToHistory: (cityName)=> dispatch(\n            {type: 'ADD_CITY_TO_HISTORY', cityName: cityName}\n            ),\n        setForecastWeather: (forecastWeather) => dispatch(\n            {type:'SET_FORECAST_WEATHER',forecastWeather: forecastWeather}\n            )\n}};\n\nexport default connect(mapProps, mapDispatchProps)(App);","import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n        city: '',\r\n        currentDayWeather: {},\r\n        forecastWeather:[],\r\n        historyCities: []\r\n};\r\n\r\n//Actions\r\nfunction  reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            };\r\n        case 'SET_CURRENT_DAY_WEATHER':\r\n            return {\r\n                ...state,\r\n                currentDayWeather: action.currentDayWeather\r\n        };\r\n        case 'SET_FORECAST_WEATHER':\r\n            return {\r\n                ...state,\r\n                forecastWeather: action.forecastWeather\r\n            };\r\n        case 'ADD_CITY_TO_HISTORY':\r\n            const copyHistoryCities = [...state.historyCities];\r\n\r\n            if(!copyHistoryCities.includes(action.cityName)){\r\n                copyHistoryCities.push(action.cityName);\r\n            }\r\n\r\n            if(copyHistoryCities.length>5){\r\n                copyHistoryCities.shift();\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                historyCities: copyHistoryCities\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nstore.subscribe(()=>{\r\n    console.log(store.getState())\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n    ,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}