{"version":3,"sources":["actions/actions.js","components/Header.js","components/Weather.js","components/Location.js","components/LastQueryCities.js","helpers/api.js","components/CurrentDayWeather.js","components/ForecastWeather.js","components/RootComponent.js","reducers/city.reducer.js","reducers/path.reducer.js","reducers/currentDayWeather.reducer.js","reducers/forecastWeather.reducer.js","reducers/historyCitites.reducer.js","reducers/rootReducer.js","index.js"],"names":["Actions","weatherActions","city","type","currentDayWeather","forecastWeather","cityName","path","connect","dispatch","setCity","_ref","confirmSearchCity","event","target","value","which","react_default","a","createElement","className","Input","placeholder","onChange","onKeyPress","state","current","concat","location","propsCity","historyCities","length","map","index","key","onClick","apiKey","setForecastWeather","match","_setForecast","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","query","params","fetch","then","response","json","sent","stop","apply","this","arguments","components_Location","components_Weather","components_LastQueryCities","react_router_dom","to","switchPath","isExact","forecastDay","date","day","condition","text","avgvis_km","avgtemp_c","totalprecip_mm","avghumidity","RootComponent","prevProps","props","setCurrentDayWeather","addCityToHistory","weather","_this$props2","cityPath","toLowerCase","components_Header","react_router","exact","from","component","CurrentDayWeather","ForecastWeather","Component","undefined","action","objectSpread","toConsumableArray","copyHistoryCities","includes","push","shift","rootReducer","combineReducers","store","createStore","subscribe","console","log","getState","ReactDOM","render","es","basename","components_RootComponent","document","getElementById"],"mappings":"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","file":"static/js/main.52cd91fa.chunk.js","sourcesContent":["export const Actions = {\r\n    SET_CITY: 'SET_CITY',\r\n    SET_CURRENT_DAY_WEATHER:'SET_CURRENT_DAY_WEATHER',\r\n    SET_FORECAST_WEATHER:'SET_FORECAST_WEATHER',\r\n    ADD_CITY_TO_HISTORY: 'ADD_CITY_TO_HISTORY',\r\n    SWITCH_PATH: 'SWITCH_PATH'\r\n};\r\n\r\nexport const weatherActions = {\r\n    setCity: (city) => ({\r\n        type: Actions.SET_CITY,\r\n        city: city\r\n    }),\r\n\r\n    setCurrentDayWeather: (currentDayWeather) => ({\r\n        type: Actions.SET_CURRENT_DAY_WEATHER,\r\n        currentDayWeather: currentDayWeather\r\n    }),\r\n\r\n    setForecastWeather: (forecastWeather)=>({\r\n        type: Actions.SET_FORECAST_WEATHER,\r\n        forecastWeather: forecastWeather\r\n    }),\r\n\r\n    addCityToHistory: (cityName) =>({\r\n        type: Actions.ADD_CITY_TO_HISTORY,\r\n        cityName: cityName\r\n    }),\r\n    switchPath: (path)=> ({\r\n        type: Actions.SWITCH_PATH, path: path\r\n    })\r\n\r\n};\r\n\r\n","import React from 'react';\r\nimport {Input} from 'reactstrap';\r\nimport {connect} from \"react-redux\";\r\nimport {weatherActions} from '../actions/actions'\r\n\r\nconst Header = ( {setCity} ) => {\r\n\r\n    function confirmSearchCity (event) {\r\n        const city = event.target.value;\r\n        if (event.which === 13) {\r\n            setCity(city);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h1>Forecast App</h1>\r\n            <Input\r\n                type=\"text\"\r\n                placeholder={\"type city, on english please...\"}\r\n                onChange={confirmSearchCity}\r\n                onKeyPress={confirmSearchCity}\r\n            />\r\n        </header>\r\n    )\r\n};\r\n\r\nconst mapDispatchProps = (dispatch) => {\r\n    return {\r\n        setCity: (city) => dispatch(weatherActions.setCity(city) ),\r\n}};\r\n\r\nexport default connect(null, mapDispatchProps)(Header);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentDayWeather}) => {\r\n    const current = currentDayWeather['current'];\r\n    return (\r\n        <ul>\r\n            <li className={\"temp_c\"}>Temperature: {`${current['temp_c']} ℃`}</li>\r\n            <li className={\"temp_c\"}>Precip: {`${current['precip_mm']} mm`}</li>\r\n            <li className={\"temp_c\"}>Wind: {`${current['wind_mph']} mph`}</li>\r\n            <li className={\"temp_c\"}>Pressure: {`${current['pressure_in']} in`}</li>\r\n            <li className={\"temp_c\"}>Humidity: {`${current['humidity']}`}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst mapProps = (state) => ({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapProps)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Location = ({currentDayWeather}) => {\r\n    const location = currentDayWeather['location'];\r\n\r\n    return (\r\n        <ul>\r\n            <li>Country: {location['country']}</li>\r\n            <li>City: {location['name']}</li>\r\n            <li>Localtime: {location['localtime']}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(Location);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {weatherActions} from '../actions/actions';\r\n\r\nconst LastQueryCities = ({historyCities, currentDayWeather, setCity}) => {\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n            <h4>last 5 query cities...</h4>\r\n            <ul>\r\n                {historyCities.length > 0 ?\r\n                    historyCities.map((city, index) =>\r\n                        <li\r\n                            key={index}\r\n                            onClick={() => setCity(city)}\r\n                            className={currentDayWeather.location['name'] === city ? 'active' : ''}\r\n                        >\r\n                            {city}\r\n                        </li>)\r\n                    : null}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    propsCity: state.city,\r\n    historyCities: state.historyCities,\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\nconst mapDispatchProps = (dispatch) => {\r\n    return {\r\n        setCity: (city) => dispatch(weatherActions.setCity(city))\r\n    }\r\n};\r\n\r\nexport default connect(mapState, mapDispatchProps)(LastQueryCities);","const apiKey = 'key=40d72c138d8f408382d145239191207';\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`https://api.apixu.com/v1/current.json?${apiKey}&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`https://api.apixu.com/v1/forecast.json?${apiKey}&q=${query}&days=5`)\r\n        .then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport LastQueryCities from './LastQueryCities';\r\nimport {getForecastData} from \"../helpers/api\";\r\nimport {weatherActions} from \"../actions/actions\";\r\n\r\nconst CurrentDayWeather = ({currentDayWeather, setForecastWeather, forecastWeather, match}) => {\r\n\r\n    async function setForecast() {\r\n        const forecastWeather = await getForecastData(match.params.city);\r\n        setForecastWeather((forecastWeather['forecast']['forecastday']))\r\n    }\r\n\r\n    return (\r\n        currentDayWeather.current ?\r\n            <div className={'rendered__weather'}>\r\n\r\n                <div className={'rendered__weather-detail'}>\r\n                    <Location/>\r\n                    <Weather/>\r\n                </div>\r\n\r\n                <LastQueryCities/>\r\n\r\n                <Link\r\n                    className={\"link__forecast\"}\r\n                    to={`/${match.params.city}/week`}\r\n                    onClick={setForecast}\r\n                >\r\n                    Weather on week\r\n                </Link>\r\n            </div>\r\n            : null\r\n    )\r\n};\r\n\r\nconst mapDispatch = (dispatch) => {\r\n    return {\r\n        setForecastWeather: (forecastWeather) =>\r\n            dispatch(weatherActions.setForecastWeather(forecastWeather))\r\n    }\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    city: state.city,\r\n    currentDayWeather: state.currentDayWeather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport {weatherActions} from '../actions/actions';\r\n\r\nconst ForecastWeather = ({forecastWeather, switchPath, match}) => {\r\n\r\n    switchPath(match.isExact);\r\n\r\n    return (\r\n        <div className={\"forecast__weather\"}>\r\n            <Link onClick={()=>switchPath(!match.isExact)}\r\n                  to={`/${match.params.city}`}\r\n            >Back\r\n            </Link>\r\n            <ul className={\"forecast__weather-detail\"}>\r\n                {\r\n                    forecastWeather.map((forecastDay, index) => {\r\n                        return <li key={index}>\r\n                            {`${forecastDay.date}: ${forecastDay.day.condition.text}`}\r\n                            <ul>\r\n                                <li>\r\n                                    {`avgvis_km: ${forecastDay.day.avgvis_km}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avgtemp_c: ${forecastDay.day.avgtemp_c}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`totalprecip_mm: ${forecastDay.day.totalprecip_mm}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avghumidity: ${forecastDay.day.avghumidity}`}\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    city:state.city,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nconst mapDispatchProps = (dispatch) => ({\r\n    switchPath: (path)=> dispatch(weatherActions.switchPath(path))\r\n});\r\n\r\nexport default connect(mapState, mapDispatchProps)(ForecastWeather);","import React, {Component} from 'react';\nimport {Route, Redirect,} from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport Header from './Header';\nimport CurrentDayWeather from './CurrentDayWeather';\nimport ForecastWeather from \"./ForecastWeather\";\nimport {getCurrentDayData} from '../helpers/api';\nimport {weatherActions} from \"../actions/actions\";\nimport '../App.scss';\n\n\nclass RootComponent extends Component {\n\n    async componentDidUpdate(prevProps) {\n        const {\n            city,\n            currentDayWeather,\n            setCurrentDayWeather,\n            addCityToHistory\n        } = this.props;\n\n        if (prevProps.city !== city) {\n            const weather = await getCurrentDayData(city);\n            setCurrentDayWeather(weather);\n\n        }\n\n        if (prevProps.currentDayWeather.location !== currentDayWeather.location && currentDayWeather.location) {\n            addCityToHistory(currentDayWeather.location['name']);\n        }\n    }\n\n    render() {\n        const {path, city } = this.props;\n        const cityPath = city.toLowerCase();\n\n        return (\n            <div className=\"App\">\n                {!path ? <Header/> : null}\n                <main>\n                    <Redirect exact from={'/forecast-app/'} to={`/${cityPath}`}/>\n                        <Route exact path={`/:city?`} component={CurrentDayWeather}/>\n                        <Route exact path={\"/:city/week\"} component={ForecastWeather}/>\n                </main>\n            </div>\n        );\n    }\n}\n\nconst mapProps = (state) => ({\n    path: state.path,\n    city: state.city,\n    currentDayWeather: state.currentDayWeather,\n    forecastWeather: state.forecastWeather,\n\n});\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        setCurrentDayWeather: (currentDayWeather) =>\n            dispatch(weatherActions.setCurrentDayWeather(currentDayWeather)),\n        addCityToHistory: (cityName) =>\n            dispatch(weatherActions.addCityToHistory(cityName)),\n    }\n};\n\nexport default connect(mapProps, mapDispatchProps)(RootComponent);","import {Actions} from '../actions/actions';\r\n\r\nconst city = (state='', action)=>{\r\n    switch (action.type) {\r\n        case Actions.SET_CITY:\r\n            return action.city;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default city;","import {Actions} from '../actions/actions';\r\n\r\nconst path =(state=false, action)=>{\r\n    switch (action.type) {\r\n        case Actions.SWITCH_PATH:\r\n            return action.path;\r\n        default:\r\n            return state;\r\n}};\r\n\r\nexport default path;","import {Actions} from '../actions/actions';\r\n\r\nconst currentDayWeather =(state={}, action)=>{\r\n    switch (action.type) {\r\n        case Actions.SET_CURRENT_DAY_WEATHER:\r\n            return {...state,\r\n                    ...action.currentDayWeather};\r\n        default:\r\n            return state;\r\n}};\r\n\r\nexport default currentDayWeather;","import {Actions} from '../actions/actions';\r\n\r\nconst forecastWeather =(state=[], action)=>{\r\n    switch (action.type) {\r\n        case Actions.SET_FORECAST_WEATHER:\r\n            return [...action.forecastWeather];\r\n        default:\r\n            return state;\r\n}};\r\n\r\nexport default forecastWeather;","import {Actions} from '../actions/actions';\r\n\r\nconst historyCities =(state=[], action)=> {\r\n    switch (action.type){\r\n        case Actions.ADD_CITY_TO_HISTORY:\r\n            const copyHistoryCities = [...state];\r\n\r\n            if (!copyHistoryCities.includes(action.cityName)) {\r\n                copyHistoryCities.push(action.cityName);\r\n            }\r\n\r\n            if (copyHistoryCities.length > 5) {\r\n                copyHistoryCities.shift();\r\n            }\r\n\r\n            return copyHistoryCities;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default historyCities;","import { combineReducers, createStore } from 'redux';\r\nimport city from './city.reducer';\r\nimport path from './path.reducer';\r\nimport currentDayWeather from  './currentDayWeather.reducer';\r\nimport forecastWeather from './forecastWeather.reducer';\r\nimport historyCities from './historyCitites.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    city: city,\r\n    path: path,\r\n    currentDayWeather: currentDayWeather,\r\n    forecastWeather: forecastWeather,\r\n    historyCities: historyCities,\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/RootComponent';\nimport { Provider } from 'react-redux';\nimport store from './reducers/rootReducer'\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nstore.subscribe(()=>console.log(store.getState()));\nReactDOM.render(\n    <Provider store={store}>\n        <Router basename={'/forecast-app/'}>\n            <App />\n        </Router>\n    </Provider>\n    ,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}