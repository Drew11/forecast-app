{"version":3,"sources":["components/Weather.js","components/Location.js","helpers/api.js","components/CurrentDayWeather.js","components/LastQuery.js","components/ForecastWeather.js","App.js","store.js","index.js"],"names":["connect","state","currentDayWeather","_ref","current","react_default","a","createElement","className","concat","location","apiKey","apiUrlCurrent","apiUrlForecast","currentCityWeather","forecastWeather","dispatch","setForecastWeather","type","setForecast","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","query","fetch","then","response","json","sent","stop","apply","this","arguments","react_router_dom","components_Location","components_Weather","to","onClick","historyCities","click","console","log","length","map","city","index","key","forecastDay","date","day","maxtemp_c","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectCityHistory","setState","prevState","objectSpread","searchCity","confirmSearchCity","event","which","target","value","prevProps","weather","props","setCurrentDayWeather","name","addCityToHistory","Input","onChange","onKeyPress","components_CurrentDayWeather","components_LastQuery","react_router","path","component","ForecastWeather","Component","cityName","store","createStore","action","copyHistoryCities","toConsumableArray","includes","push","shift","subscribe","getState","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.43e45679.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentDayWeather})=> {\r\n  const current = currentDayWeather['current'];\r\n\r\n  return (\r\n       <ul>\r\n          <li className={\"temp_c\"}>Temperature: {`${current['temp_c']} â„ƒ`}</li>\r\n          <li className={\"temp_c\"}>Precip: {`${current['precip_mm']} mm`}</li>\r\n          <li className={\"temp_c\"}>Wind: {`${current['wind_mph']} mph`}</li>\r\n          <li className={\"temp_c\"}>Pressure: {`${current['pressure_in']} in`}</li>\r\n          <li className={\"temp_c\"}>Humidity: {`${current['humidity']}`}</li>\r\n\r\n      </ul>\r\n  )\r\n};\r\n\r\nconst mapProps = (state)=>({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapProps)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Location = ({currentDayWeather})=> {\r\n    const location = currentDayWeather['location'];\r\n\r\n    return (\r\n            <ul>\r\n                <li>Country: {location['country']}</li>\r\n                <li>City: {location['name']}</li>\r\n                <li>Localtime: {location['localtime']}</li>\r\n            </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(Location);","const apiKey = 'key=40d72c138d8f408382d145239191207';\r\nconst apiUrlCurrent = 'https://api.apixu.com/v1/current.json?';\r\nconst apiUrlForecast = 'https://api.apixu.com/v1/forecast.json?';\r\n\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`${apiUrlCurrent+apiKey}&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`${apiUrlForecast+apiKey}&q=${query}&days=5`)\r\n        .then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n}","import React from 'react';\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {getForecastData} from \"../helpers/api\";\r\n\r\nconst CurrentDayWeather = ( {currentCityWeather, setForecastWeather, forecastWeather  } )=> {\r\n\r\n    const setForecast = async ()=>{\r\n        const forecastWeather = await getForecastData(currentCityWeather.location['name']);\r\n        setForecastWeather((forecastWeather['forecast']['forecastday']));\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        currentCityWeather.current ?\r\n            <Router>\r\n                <div className={'rendered__weather-detail'}>\r\n                    <Location/>\r\n                    <Weather/>\r\n                </div>\r\n\r\n                <Link\r\n                    className={\"link__forecast\"}\r\n                    to={\"/forecast_weather\"}\r\n                      onClick={setForecast}\r\n                >\r\n                    Weather on week\r\n                </Link>\r\n            </Router>\r\n            : null\r\n    )\r\n};\r\n\r\n\r\nconst mapDispatch = (dispatch) => {\r\n    return{\r\n    setForecastWeather: (forecastWeather) => dispatch({type:'SET_FORECAST_WEATHER',forecastWeather: forecastWeather})\r\n}\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentCityWeather: state.currentDayWeather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst LastQuery = ({historyCities, click, currentDayWeather})=> {\r\n    console.log(currentDayWeather)\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n         <h4>last 5 query cities...</h4>\r\n             <ul>\r\n                {historyCities.length>0?\r\n                     historyCities.map((city, index)=>\r\n                     <li\r\n                        key={index}\r\n                        onClick={()=>click(city)}\r\n                        className={currentDayWeather.location['name']===city? 'active': ''}\r\n                      >\r\n                       {city}\r\n                     </li>)\r\n                :null}\r\n              </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    historyCities: state.historyCities,\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(LastQuery);","import React from 'react';\r\nimport App from '../App';\r\nimport {connect} from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst ForecastWeather = ({ forecastWeather })=> {\r\n    console.log(forecastWeather)\r\n\r\n    return (\r\n        <Router>\r\n            <div className={\"forecast\"}>\r\n\r\n                {\r\n                 forecastWeather.map(forecastDay=>{\r\n                    return <li>\r\n                         {forecastDay.date + '--- avgtemp_c:' +forecastDay.day.maxtemp_c}\r\n                       </li>\r\n                    })\r\n                }\r\n             </div>\r\n\r\n        </Router>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState)(ForecastWeather);","import React, {Component} from 'react';\nimport CurrentDayWeather from './components/CurrentDayWeather';\nimport LastQuery from './components/LastQuery';\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport {Input} from 'reactstrap'\nimport { connect} from 'react-redux';\nimport { getCurrentDayData} from './helpers/api';\nimport './App.scss';\n\nimport {CURRENT_DAY_WEATHER} from './constans/constans'\nimport ForecastWeather from \"./components/ForecastWeather\";\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state = {\n          searchCity:'',\n      };\n  }\n\n  selectCityHistory =(city)=>{\n      this.setState(prevState=>({\n           ...prevState,\n           searchCity: city\n          }))\n  };\n\n  confirmSearchCity = (event)=>{\n    if(event.which === 13 ){\n      const city = event.target.value;\n\n      this.setState(prevState=>({\n          ...prevState,\n          searchCity: city\n      }));\n    }\n  };\n\n  async componentDidUpdate( prevProps, prevState ) {\n      if (prevState.searchCity !== this.state.searchCity) {\n          const weather = await getCurrentDayData(this.state.searchCity);\n          this.props.setCurrentDayWeather(weather)\n      }\n\n      if (prevProps.currentDayWeather.current!== this.props.currentDayWeather.current) {\n          if(this.props.currentDayWeather.location && this.props.currentDayWeather.location.name){\n              this.props.addCityToHistory(this.props.currentDayWeather.location['name']);\n          }\n  }}\n\n  render(){\n      console.log(this.props.forecastWeather)\n      return (\n         <Router>\n          <div className=\"App\">\n          <header className=\"App-header\">\n                  <h1>Forecast App</h1>\n              <Input\n                  type=\"text\"\n                  onChange={ this.confirmSearchCity }\n                  onKeyPress={ this.confirmSearchCity }\n              />\n          </header>\n\n              <main>\n                  <CurrentDayWeather/>\n                  <LastQuery click={ this.selectCityHistory }/>\n                  {this.props.forecastWeather.length>0?\n                      <Route path={\"/forecast_weather\"} component={ForecastWeather}/>: null}\n              </main>\n\n          </div>\n         </Router>\n      );\n  }\n}\n\nconst mapProps = (state) => ({\n    currentDayWeather: state.currentDayWeather,\n    forecastWeather: state.forecastWeather,\n});\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        setCurrentDayWeather: (currentDayWeather)=> dispatch({type: 'SET_CURRENT_DAY_WEATHER', currentDayWeather: currentDayWeather }),\n        addCityToHistory: (cityName)=> dispatch( {type: 'ADD_CITY_TO_HISTORY', cityName: cityName} ),\n}};\n\nexport default connect(mapProps, mapDispatchProps)(App);","import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n        currentDayWeather: {},\r\n        forecastWeather:[],\r\n        historyCities: []\r\n};\r\n\r\n//Actions\r\nfunction  reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_DAY_WEATHER':\r\n            return {\r\n                ...state,\r\n                currentDayWeather: action.currentDayWeather\r\n        };\r\n        case 'SET_FORECAST_WEATHER':\r\n            return {\r\n                ...state,\r\n                forecastWeather: action.forecastWeather\r\n            };\r\n        case 'ADD_CITY_TO_HISTORY':\r\n            const copyHistoryCities = [...state.historyCities];\r\n\r\n            if(!copyHistoryCities.includes(action.cityName)){\r\n                copyHistoryCities.push(action.cityName);\r\n            }\r\n\r\n            if(copyHistoryCities.length>5){\r\n                copyHistoryCities.shift();\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                historyCities: copyHistoryCities\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nstore.subscribe(()=>{\r\n    console.log(store.getState())\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}