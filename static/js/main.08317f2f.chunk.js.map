{"version":3,"sources":["components/Weather.js","components/Location.js","components/ForecastWeather.js","components/CurrentDayWeather.js","api/api.js","components/LastQuery.js","App.js","store.js","index.js"],"names":["connect","state","currentCityWeather","weather","current","_ref","react_default","a","createElement","className","concat","currentCityLocation","location","forecastWeather","console","log","forecastDays","react_router_dom","to","map","forecastDay","date","day","maxtemp_c","react_router","path","component","App","setForecastWeather","type","dispatch","setForecastWeather1","setForecast","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","query","fetch","then","response","json","sent","stop","apply","this","arguments","components_Weather","components_Location","onClick","ForecastWeather","fiveLastSearchCity","click","length","city","setWeather","addCity","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectCityHistory","setState","prevState","objectSpread","searchCity","confirmSearchCity","event","which","target","value","prevProps","props","name","Input","onChange","onKeyPress","components_CurrentDayWeather","components_LastQuery","Component","store","createStore","action","copy","toConsumableArray","includes","push","shift","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.08317f2f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentCityWeather})=> {\r\n\r\n  return (\r\n       <ul>\r\n          <li className={\"temp_c\"}>Temperature: {`${currentCityWeather['temp_c']} â„ƒ`}</li>\r\n          <li className={\"temp_c\"}>Precip: {`${currentCityWeather['precip_mm']} mm`}</li>\r\n          <li className={\"temp_c\"}>Wind: {`${currentCityWeather['wind_mph']} mph`}</li>\r\n          <li className={\"temp_c\"}>Pressure: {`${currentCityWeather['pressure_in']} in`}</li>\r\n          <li className={\"temp_c\"}>Humidity: {`${currentCityWeather['humidity']}`}</li>\r\n\r\n      </ul>\r\n  )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentCityWeather: state.weather.current\r\n});\r\n\r\nexport default connect(mapState)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst Location = ({currentCityLocation})=> {\r\n    return (\r\n            <ul>\r\n                <li>Country: {currentCityLocation['country']}</li>\r\n                <li>City: {currentCityLocation['name']}</li>\r\n                <li>Localtime: {currentCityLocation['localtime']}</li>\r\n            </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    currentCityLocation: state.weather.location\r\n});\r\n\r\nexport default connect(mapState)(Location);","import React from 'react';\r\nimport App from '../App';\r\nimport {connect} from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst ForecastWeather = ({ forecastWeather })=> {\r\n    console.log(forecastWeather)\r\n\r\n    const forecastDays = forecastWeather['forecast']['forecastday'];\r\n    return (\r\n        <div className={\"forecast\"}>\r\n            <Link to={\"./\"}>\r\n                Back Home\r\n            </Link>\r\n            {forecastDays.map(forecastDay=>{\r\n               return <li>\r\n                {forecastDay.date + ':  ' +forecastDay.day.maxtemp_c}\r\n               </li>\r\n            })}\r\n            <Route path={\"./\"} component={App}/>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState)(ForecastWeather);","import React from 'react';\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport ForecastWeather from './ForecastWeather';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {getForecastData} from \"../api/api\";\r\n\r\nconst setForecastWeather = { type: 'setForecastWeather'};\r\n\r\nconst CurrentDayWeather = ( {currentCityWeather,\r\n                             forecastWeather,\r\n                             setForecastWeather1} )=> {\r\n\r\n    const setForecast = async ()=>{\r\n        setForecastWeather['forecastWeather'] = await getForecastData(currentCityWeather.location['name']);\r\n        console.log(setForecastWeather['forecastWeather'])\r\n        setForecastWeather1(forecastWeather['forecastWeather']);\r\n    };\r\n\r\n    return (\r\n        currentCityWeather.current?\r\n        <Router>\r\n             <div className={'rendered__weather-detail'}>\r\n                <Weather />\r\n                <Location />\r\n                <Link to={\"/forecast_weather\"}\r\n                  onClick={setForecast}\r\n                 >\r\n                   Weather on week\r\n                </Link>\r\n\r\n\r\n              {forecastWeather['forecast']?\r\n                 <Route path={\"/forecast_weather\"} component={ForecastWeather} />:\r\n                     null\r\n              }\r\n\r\n            </div>\r\n        </Router>\r\n        :null\r\n    )\r\n};\r\n\r\n\r\nconst mapDispatch = (dispatch) => ({\r\n    'setForecastWeather1': () => dispatch(setForecastWeather)\r\n});\r\n\r\nconst mapState = (state)=>({\r\n    currentCityWeather: state.weather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);\r\n","export {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n};\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`http://api.apixu.com/v1/current.json?key=40d72c138d8f408382d145239191207&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`http://api.apixu.com/v1/forecast.json?key=40d72c138d8f408382d145239191207&q=${query}&days=5`)\r\n        .then(response=>response.json());\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst LastQuery = ({fiveLastSearchCity, click})=> {\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n            <h4>last 5 query cities...</h4>\r\n            {fiveLastSearchCity.length>0?\r\n                fiveLastSearchCity.map(city=>\r\n                    <li\r\n                        onClick={()=>click(city)}\r\n                    >\r\n                       {city}\r\n                    </li>)\r\n                :null}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state)=>({\r\n    fiveLastSearchCity: state.fiveLastSearchCity\r\n});\r\n\r\nexport default connect(mapState)(LastQuery);","import React, {Component} from 'react';\nimport CurrentDayWeather from './components/CurrentDayWeather';\nimport LastQuery from './components/LastQuery';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport {Input} from 'reactstrap'\nimport { connect} from 'react-redux';\nimport { getCurrentDayData} from './api/api';\nimport './App.scss';\n\n\nconst setWeather = { type: 'setWeather'};\nconst addCity = {type: 'addCity'};\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state = {\n          searchCity:'',\n      };\n  }\n\n  selectCityHistory =(city)=>{\n      this.setState(prevState=>({\n           ...prevState,\n           searchCity: city\n          }))\n  };\n\n  confirmSearchCity = (event)=>{\n    if(event.which === 13 ){\n      const city = event.target.value;\n\n      this.setState(prevState=>({\n          ...prevState,\n          searchCity: city\n      }));\n    }\n  };\n\n  async componentDidUpdate( prevProps, prevState ) {\n      if (prevState.searchCity !== this.state.searchCity) {\n          const weather = await getCurrentDayData(this.state.searchCity);\n          setWeather['weather'] = weather;\n          this.props.setWeather(weather)\n      }\n\n      if (prevProps.weather.location!== this.props.weather.location) {\n          if(this.props.weather.location && this.props.weather.location.name){\n              addCity['searchCity'] = this.props.weather.location['name'];\n              this.props.addCity(addCity['searchCity']);\n          }\n  }}\n\n  render(){\n      return (\n         <Router>\n          <div className=\"App\">\n          <header className=\"App-header\">\n                  <h1>Forecast App</h1>\n              <Input\n                  type=\"text\"\n                  onChange={ this.confirmSearchCity }\n                  onKeyPress={ this.confirmSearchCity }\n              />\n          </header>\n              <CurrentDayWeather />\n              <LastQuery click={this.selectCityHistory}/>\n          </div>\n         </Router>\n      );\n  }\n}\n\nconst mapState = (state) => ({\n    weather: state.weather,\n    forecastWeather: state.forecastWeather,\n    fiveLastSearchCity: state.fiveLastSearchCity\n});\n\nconst mapDispatch = (dispatch) => ({\n    'setWeather': ()=> dispatch(setWeather),\n    'addCity': ()=>dispatch(addCity)\n});\n\nexport default connect(mapState, mapDispatch)(App);","import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n        weather: {},\r\n        forecastWeather:{},\r\n        fiveLastSearchCity: []\r\n};\r\n\r\nfunction  reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'setWeather':\r\n            return {   ...state,\r\n            weather: action.weather\r\n        };\r\n        case 'setForecastWeather':\r\n            console.log(action.forecastWeather)\r\n            return {\r\n                ...state,\r\n                forecastWeather: action.forecastWeather\r\n            };\r\n        case 'addCity':\r\n            const copy = [...state.fiveLastSearchCity];\r\n\r\n            if(!copy.includes(action.searchCity)){\r\n                copy.push(action.searchCity);\r\n            }\r\n\r\n            if(copy.length>5){\r\n                copy.shift();\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                fiveLastSearchCity: copy\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}