{"version":3,"sources":["components/Weather.js","components/Location.js","components/LastQueryCities.js","helpers/api.js","components/CurrentDayWeather.js","components/ForecastWeather.js","App.js","store.js","index.js"],"names":["connect","state","currentDayWeather","_ref","current","react_default","a","createElement","className","concat","location","propsCity","city","historyCities","dispatch","setCity","type","length","map","index","key","onClick","apiKey","apiUrlCurrent","apiUrlForecast","currentCityWeather","forecastWeather","setForecastWeather","match","_setForecast","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","query","fetch","then","response","json","sent","stop","apply","this","arguments","components_Location","components_Weather","components_LastQueryCities","react_router_dom","to","forecastDay","date","day","condition","text","avgvis_km","avgtemp_c","avghumidity","App","confirmSearchCity","event","_this","props","target","value","which","prevProps","setCurrentDayWeather","addCityToHistory","weather","Input","placeholder","onChange","onKeyPress","react_router","exact","path","component","CurrentDayWeather","ForecastWeather","Component","cityName","store","createStore","action","objectSpread","copyHistoryCities","toConsumableArray","includes","push","shift","ReactDOM","render","es","basename","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2ebf601b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentDayWeather}) => {\r\n    const current = currentDayWeather['current'];\r\n\r\n    return (\r\n        <ul>\r\n            <li className={\"temp_c\"}>Temperature: {`${current['temp_c']} â„ƒ`}</li>\r\n            <li className={\"temp_c\"}>Precip: {`${current['precip_mm']} mm`}</li>\r\n            <li className={\"temp_c\"}>Wind: {`${current['wind_mph']} mph`}</li>\r\n            <li className={\"temp_c\"}>Pressure: {`${current['pressure_in']} in`}</li>\r\n            <li className={\"temp_c\"}>Humidity: {`${current['humidity']}`}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst mapProps = (state) => ({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapProps)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Location = ({currentDayWeather}) => {\r\n    const location = currentDayWeather['location'];\r\n\r\n    return (\r\n        <ul>\r\n            <li>Country: {location['country']}</li>\r\n            <li>City: {location['name']}</li>\r\n            <li>Localtime: {location['localtime']}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(Location);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst LastQueryCities = ({historyCities, currentDayWeather, setCity}) => {\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n            <h4>last 5 query cities...</h4>\r\n            <ul>\r\n                {historyCities.length > 0 ?\r\n                    historyCities.map((city, index) =>\r\n                        <li\r\n                            key={index}\r\n                            onClick={() => setCity(city)}\r\n                            className={currentDayWeather.location['name'] === city ? 'active' : ''}\r\n                        >\r\n                            {city}\r\n                        </li>)\r\n                    : null}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    propsCity: state.city,\r\n    historyCities: state.historyCities,\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\nconst mapDispatchProps = (dispatch) => {\r\n    return {\r\n        setCity: (city) => dispatch({type: 'SET_CITY', city: city})\r\n    }\r\n};\r\n\r\nexport default connect(mapState, mapDispatchProps)(LastQueryCities);","const apiKey = 'key=40d72c138d8f408382d145239191207';\r\nconst apiUrlCurrent = 'https://api.apixu.com/v1/current.json?';\r\nconst apiUrlForecast = 'https://api.apixu.com/v1/forecast.json?';\r\n\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`${apiUrlCurrent+apiKey}&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`${apiUrlForecast+apiKey}&q=${query}&days=5`)\r\n        .then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport LastQueryCities from './LastQueryCities';\r\nimport {getForecastData} from \"../helpers/api\";\r\n\r\nconst CurrentDayWeather = ({currentCityWeather, setForecastWeather, forecastWeather, city, match}) => {\r\n\r\n    async function setForecast() {\r\n        const forecastWeather = await getForecastData(city);\r\n        setForecastWeather((forecastWeather['forecast']['forecastday']))\r\n    }\r\n\r\n    return (\r\n        currentCityWeather.current ?\r\n            <div className={'rendered__weather'}>\r\n\r\n                <div className={'rendered__weather-detail'}>\r\n                    <Location/>\r\n                    <Weather/>\r\n                </div>\r\n\r\n                <LastQueryCities/>\r\n\r\n                <Link\r\n                    className={\"link__forecast\"}\r\n                    to={\"/week\"}\r\n                    onClick={setForecast}\r\n                >\r\n                    Weather on week\r\n                </Link>\r\n            </div>\r\n            : null\r\n    )\r\n};\r\n\r\nconst mapDispatch = (dispatch) => {\r\n    return {\r\n        setForecastWeather: (forecastWeather) => dispatch(\r\n            {type: 'SET_FORECAST_WEATHER', forecastWeather: forecastWeather}\r\n        )\r\n    }\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    city: state.city,\r\n    currentCityWeather: state.currentDayWeather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst ForecastWeather = ({forecastWeather}) => {\r\n    return (\r\n        <div className={\"forecast__weather\"}>\r\n            <Link to={'/forecast-app'}>Back</Link>\r\n            <ul className={\"forecast__weather-detail\"}>\r\n                {\r\n                    forecastWeather.map((forecastDay, index) => {\r\n                        return <li key={index}>\r\n                            {`${forecastDay.date}: ${forecastDay.day.condition.text}`}\r\n                            <ul>\r\n                                <li>\r\n                                    {`avgvis_km: ${forecastDay.day.avgvis_km}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avgtemp_c: ${forecastDay.day.avgtemp_c}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avgtemp_c: ${forecastDay.day.avgtemp_c}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avghumidity: ${forecastDay.day.avghumidity}`}\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState)(ForecastWeather);","import React, {Component} from 'react';\nimport {Route} from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport {Input} from 'reactstrap'\nimport CurrentDayWeather from './components/CurrentDayWeather';\nimport ForecastWeather from \"./components/ForecastWeather\";\nimport {getCurrentDayData} from './helpers/api';\nimport './App.scss';\n\nclass App extends Component {\n\n    confirmSearchCity = (event) => {\n        const {setCity} = this.props;\n        const city = event.target.value;\n\n        if (event.which === 13) {\n            setCity(city);\n        }\n    };\n\n    async componentDidUpdate(prevProps) {\n        const {\n            city,\n            currentDayWeather,\n            setCurrentDayWeather,\n            addCityToHistory\n        } = this.props;\n\n        if (prevProps.city !== city) {\n            const weather = await getCurrentDayData(city);\n            setCurrentDayWeather(weather)\n        }\n        if (prevProps.currentDayWeather.location !== currentDayWeather.location && currentDayWeather.location) {\n            addCityToHistory(this.props.currentDayWeather.location['name']);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Forecast App</h1>\n                    <Input\n                        type=\"text\"\n                        placeholder={\"type city, on english please...\"}\n                        onChange={this.confirmSearchCity}\n                        onKeyPress={this.confirmSearchCity}\n                    />\n                </header>\n\n                <main>\n                    <Route exact path={\"/forecast-app/\"} component={CurrentDayWeather}/>\n                    <Route path={\"/forecast-app/week\"} component={ForecastWeather}/>\n                </main>\n\n            </div>\n        );\n    }\n}\n\nconst mapProps = (state) => ({\n    city: state.city,\n    currentDayWeather: state.currentDayWeather,\n    forecastWeather: state.forecastWeather,\n\n});\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        setCity: (city) => dispatch(\n            {type: 'SET_CITY', city: city}\n        ),\n        setCurrentDayWeather: (currentDayWeather) => dispatch(\n            {type: 'SET_CURRENT_DAY_WEATHER', currentDayWeather: currentDayWeather}\n        ),\n        addCityToHistory: (cityName) => dispatch(\n            {type: 'ADD_CITY_TO_HISTORY', cityName: cityName}\n        ),\n    }\n};\n\nexport default connect(mapProps, mapDispatchProps)(App);","import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n    city: '',\r\n    currentDayWeather: {},\r\n    forecastWeather: [],\r\n    historyCities: []\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            };\r\n        case 'SET_CURRENT_DAY_WEATHER':\r\n            return {\r\n                ...state,\r\n                currentDayWeather: action.currentDayWeather\r\n            };\r\n        case 'SET_FORECAST_WEATHER':\r\n            return {\r\n                ...state,\r\n                forecastWeather: action.forecastWeather\r\n            };\r\n        case 'ADD_CITY_TO_HISTORY':\r\n            const copyHistoryCities = [...state.historyCities];\r\n\r\n            if (!copyHistoryCities.includes(action.cityName)) {\r\n                copyHistoryCities.push(action.cityName);\r\n            }\r\n\r\n            if (copyHistoryCities.length > 5) {\r\n                copyHistoryCities.shift();\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                historyCities: copyHistoryCities\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router basename={\"/forecast-app\"}>\n            <App />\n        </Router>\n    </Provider>\n    ,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}