{"version":3,"sources":["components/Header.js","components/Weather.js","components/Location.js","components/LastQueryCities.js","helpers/api.js","components/CurrentDayWeather.js","components/ForecastWeather.js","App.js","store.js","index.js"],"names":["connect","dispatch","setCity","city","type","_ref","confirmSearchCity","event","target","value","which","react_default","a","createElement","className","Input","placeholder","onChange","onKeyPress","state","currentDayWeather","current","concat","location","propsCity","historyCities","length","map","index","key","onClick","apiKey","apiUrlCurrent","apiUrlForecast","currentCityWeather","forecastWeather","setForecastWeather","match","_setForecast","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","query","fetch","then","response","json","sent","stop","apply","this","arguments","components_Location","components_Weather","components_LastQueryCities","react_router_dom","to","switchPath","path","isExact","forecastDay","date","day","condition","text","avgvis_km","avgtemp_c","totalprecip_mm","avghumidity","App","prevProps","props","setCurrentDayWeather","addCityToHistory","weather","components_Header","react_router","exact","component","CurrentDayWeather","ForecastWeather","Component","cityName","store","createStore","action","objectSpread","copyHistoryCities","toConsumableArray","includes","push","shift","ReactDOM","render","es","basename","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.528504f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Input} from 'reactstrap';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Header = ( {setCity} ) => {\r\n\r\n    function confirmSearchCity (event) {\r\n        const city = event.target.value;\r\n        if (event.which === 13) {\r\n            setCity(city);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h1>Forecast App</h1>\r\n            <Input\r\n                type=\"text\"\r\n                placeholder={\"type city, on english please...\"}\r\n                onChange={confirmSearchCity}\r\n                onKeyPress={confirmSearchCity}\r\n            />\r\n        </header>\r\n    )\r\n};\r\n\r\nconst mapDispatchProps = (dispatch) => {\r\n    return {\r\n        setCity: (city) => dispatch( {type: 'SET_CITY', city: city} ),\r\n}};\r\n\r\nexport default connect(null, mapDispatchProps)(Header);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Weather = ({currentDayWeather}) => {\r\n    const current = currentDayWeather['current'];\r\n\r\n    return (\r\n        <ul>\r\n            <li className={\"temp_c\"}>Temperature: {`${current['temp_c']} â„ƒ`}</li>\r\n            <li className={\"temp_c\"}>Precip: {`${current['precip_mm']} mm`}</li>\r\n            <li className={\"temp_c\"}>Wind: {`${current['wind_mph']} mph`}</li>\r\n            <li className={\"temp_c\"}>Pressure: {`${current['pressure_in']} in`}</li>\r\n            <li className={\"temp_c\"}>Humidity: {`${current['humidity']}`}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst mapProps = (state) => ({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapProps)(Weather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Location = ({currentDayWeather}) => {\r\n    const location = currentDayWeather['location'];\r\n\r\n    return (\r\n        <ul>\r\n            <li>Country: {location['country']}</li>\r\n            <li>City: {location['name']}</li>\r\n            <li>Localtime: {location['localtime']}</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\n\r\nexport default connect(mapState)(Location);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nconst LastQueryCities = ({historyCities, currentDayWeather, setCity}) => {\r\n\r\n    return (\r\n        <div className={\"lastFiveQuery\"}>\r\n            <h4>last 5 query cities...</h4>\r\n            <ul>\r\n                {historyCities.length > 0 ?\r\n                    historyCities.map((city, index) =>\r\n                        <li\r\n                            key={index}\r\n                            onClick={() => setCity(city)}\r\n                            className={currentDayWeather.location['name'] === city ? 'active' : ''}\r\n                        >\r\n                            {city}\r\n                        </li>)\r\n                    : null}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    propsCity: state.city,\r\n    historyCities: state.historyCities,\r\n    currentDayWeather: state.currentDayWeather\r\n});\r\nconst mapDispatchProps = (dispatch) => {\r\n    return {\r\n        setCity: (city) => dispatch({type: 'SET_CITY', city: city})\r\n    }\r\n};\r\n\r\nexport default connect(mapState, mapDispatchProps)(LastQueryCities);","const apiKey = 'key=40d72c138d8f408382d145239191207';\r\nconst apiUrlCurrent = 'https://api.apixu.com/v1/current.json?';\r\nconst apiUrlForecast = 'https://api.apixu.com/v1/forecast.json?';\r\n\r\n\r\nfunction getCurrentDayData(query) {\r\n return fetch(`${apiUrlCurrent+apiKey}&q=${query}`)\r\n        .then(response=>response.json());\r\n}\r\n\r\nfunction getForecastData(query) {\r\n    return fetch(`${apiUrlForecast+apiKey}&q=${query}&days=5`)\r\n        .then(response => response.json());\r\n}\r\n\r\nexport {\r\n    getCurrentDayData,\r\n    getForecastData,\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport Weather from './Weather';\r\nimport Location from './Location';\r\nimport LastQueryCities from './LastQueryCities';\r\nimport {getForecastData} from \"../helpers/api\";\r\n\r\nconst CurrentDayWeather = ({currentCityWeather, setForecastWeather, forecastWeather, city, match}) => {\r\n\r\n    async function setForecast() {\r\n        const forecastWeather = await getForecastData(city);\r\n        setForecastWeather((forecastWeather['forecast']['forecastday']))\r\n    }\r\n\r\n    return (\r\n        currentCityWeather.current ?\r\n            <div className={'rendered__weather'}>\r\n\r\n                <div className={'rendered__weather-detail'}>\r\n                    <Location/>\r\n                    <Weather/>\r\n                </div>\r\n\r\n                <LastQueryCities/>\r\n\r\n                <Link\r\n                    className={\"link__forecast\"}\r\n                    to={\"/week\"}\r\n                    onClick={setForecast}\r\n                >\r\n                    Weather on week\r\n                </Link>\r\n            </div>\r\n            : null\r\n    )\r\n};\r\n\r\nconst mapDispatch = (dispatch) => {\r\n    return {\r\n        setForecastWeather: (forecastWeather) => dispatch(\r\n            {type: 'SET_FORECAST_WEATHER', forecastWeather: forecastWeather}\r\n        )\r\n    }\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    city: state.city,\r\n    currentCityWeather: state.currentDayWeather,\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nexport default connect(mapState, mapDispatch)(CurrentDayWeather);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst ForecastWeather = ({forecastWeather, switchPath, match}) => {\r\n\r\n    switchPath(match.isExact);\r\n\r\n    return (\r\n        <div className={\"forecast__weather\"}>\r\n            <Link onClick={()=>switchPath(!match.isExact)}\r\n                  to={'/'}\r\n            >Back\r\n            </Link>\r\n            <ul className={\"forecast__weather-detail\"}>\r\n                {\r\n                    forecastWeather.map((forecastDay, index) => {\r\n                        return <li key={index}>\r\n                            {`${forecastDay.date}: ${forecastDay.day.condition.text}`}\r\n                            <ul>\r\n                                <li>\r\n                                    {`avgvis_km: ${forecastDay.day.avgvis_km}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avgtemp_c: ${forecastDay.day.avgtemp_c}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`totalprecip_mm: ${forecastDay.day.totalprecip_mm}`}\r\n                                </li>\r\n                                <li>\r\n                                    {`avghumidity: ${forecastDay.day.avghumidity}`}\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapState = (state) => ({\r\n    forecastWeather: state.forecastWeather,\r\n});\r\n\r\nconst mapDispatchProps = (dispatch) => ({\r\n    switchPath: (path)=>  dispatch({\r\n        type: 'SWITCH_PATH', path: path\r\n    })\r\n});\r\n\r\nexport default connect(mapState, mapDispatchProps)(ForecastWeather);","import React, {Component} from 'react';\nimport {Route} from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport Header from './components/Header';\nimport CurrentDayWeather from './components/CurrentDayWeather';\nimport ForecastWeather from \"./components/ForecastWeather\";\nimport {getCurrentDayData} from './helpers/api';\nimport './App.scss';\n\nclass App extends Component {\n\n    async componentDidUpdate(prevProps) {\n        const {\n            city,\n            currentDayWeather,\n            setCurrentDayWeather,\n            addCityToHistory\n        } = this.props;\n\n        if (prevProps.city !== city) {\n            const weather = await getCurrentDayData(city);\n            setCurrentDayWeather(weather)\n        }\n        if (prevProps.currentDayWeather.location !== currentDayWeather.location && currentDayWeather.location) {\n            addCityToHistory(this.props.currentDayWeather.location['name']);\n        }\n    }\n\n    render() {\n        const { path } = this.props;\n\n        return (\n            <div className=\"App\">\n                { !path ?<Header />:null}\n                <main>\n                    <Route exact path={\"/\"} component={CurrentDayWeather}/>\n                    <Route path={\"/week\"} component={ForecastWeather}/>\n                </main>\n            </div>\n        );\n    }\n}\n\nconst mapProps = (state) => ({\n    path: state.path,\n    city: state.city,\n    currentDayWeather: state.currentDayWeather,\n    forecastWeather: state.forecastWeather,\n\n});\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        setCurrentDayWeather: (currentDayWeather) => dispatch(\n            {type: 'SET_CURRENT_DAY_WEATHER', currentDayWeather: currentDayWeather}\n        ),\n        addCityToHistory: (cityName) => dispatch(\n            {type: 'ADD_CITY_TO_HISTORY', cityName: cityName}\n        ),\n    }\n};\n\nexport default connect(mapProps, mapDispatchProps)(App);","import {createStore} from 'redux';\r\n\r\nconst initialState = {\r\n    path: false,\r\n    city: '',\r\n    currentDayWeather: {},\r\n    forecastWeather: [],\r\n    historyCities: []\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'SWITCH_PATH':\r\n           return{\r\n               ...state,\r\n               path: action.path\r\n           };\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            };\r\n        case 'SET_CURRENT_DAY_WEATHER':\r\n            return {\r\n                ...state,\r\n                currentDayWeather: action.currentDayWeather\r\n            };\r\n        case 'SET_FORECAST_WEATHER':\r\n            return {\r\n                ...state,\r\n                forecastWeather: action.forecastWeather\r\n            };\r\n        case 'ADD_CITY_TO_HISTORY':\r\n            const copyHistoryCities = [...state.historyCities];\r\n\r\n            if (!copyHistoryCities.includes(action.cityName)) {\r\n                copyHistoryCities.push(action.cityName);\r\n            }\r\n\r\n            if (copyHistoryCities.length > 5) {\r\n                copyHistoryCities.shift();\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                historyCities: copyHistoryCities\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router basename={\"/forecast-app\"}>\n            <App />\n        </Router>\n    </Provider>\n    ,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}